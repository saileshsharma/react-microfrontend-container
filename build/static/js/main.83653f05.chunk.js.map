{"version":3,"sources":["MicroFrontend.js","App.js","serviceWorker.js","index.js"],"names":["MicroFrontend","name","host","history","useEffect","scriptId","console","log","renderMicroFrontend","window","document","getElementById","fetch","then","res","json","manifest","script","createElement","id","crossOrigin","src","files","onload","head","appendChild","defaultProps","createBrowserHistory","process","dogsHost","REACT_APP_DOGS_HOST","catsHost","REACT_APP_CATS_HOST","REACT_APP_CONTENTS_HOST","Header","className","Dogs","Cats","GreetingCat","Home","useState","input","setInput","placeholder","defaultValue","onBlur","e","target","value","onClick","push","App","Fragment","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wQAEA,SAASA,EAAT,GAAiD,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QAiCnC,OAhCAC,qBAAU,WACR,IAAMC,EAAQ,gCAA4BJ,GAC1CK,QAAQC,IAAI,qCAAqCF,GAEjD,IAAMG,EAAsB,WAE1BC,OAAO,SAAD,OAAUR,IAAhB,UAA2BA,EAA3B,cAA6CE,IAG/C,IAAIO,SAASC,eAAeN,GAkB5B,OAbAO,MAAM,GAAD,OAAIV,EAAJ,yBACFW,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAASP,SAASQ,cAAc,UACtCD,EAAOE,GAAKd,EACZY,EAAOG,YAAc,GACrBH,EAAOI,IAAP,UAAgBnB,GAAhB,OAAuBc,EAASM,MAAM,YACtCL,EAAOM,OAAS,WACdf,KAEFE,SAASc,KAAKC,YAAYR,MAGvB,WACLR,OAAO,UAAD,OAAWR,KAAWQ,OAAO,UAAD,OAAWR,IAAjB,UAA4BA,EAA5B,gBAlB5BO,OAsBG,0BAAMW,GAAE,UAAKlB,EAAL,gBAGjBD,EAAc0B,aAAe,CAC3BhB,kBACAD,eAGaT,QCjCf,G,MAHuB2B,cAOnBC,4PAHmBC,EADvB,EACEC,oBACqBC,EAFvB,EAEEC,oBAFF,EAGEC,wBAIF,SAASC,IACP,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,gBAAd,2CACA,6DAMN,SAASC,EAAT,GAA4B,IAAZjC,EAAW,EAAXA,QACd,OAAO,kBAAC,EAAD,CAAeA,QAASA,EAASD,KAAM2B,EAAU5B,KAAK,SAW/D,SAASoC,EAAT,GAA4B,IAAZlC,EAAW,EAAXA,QACd,OAAO,kBAAC,EAAD,CAAeA,QAASA,EAASD,KAAM6B,EAAU9B,KAAK,SAI/D,SAASqC,EAAT,GAAmC,IAAZnC,EAAW,EAAXA,QACrB,OACE,6BACE,kBAAC+B,EAAD,MACA,yBAAKC,UAAU,QACb,kBAAC,EAAD,CAAehC,QAASA,EAASD,KAAM6B,EAAU9B,KAAK,WAkB9D,SAASsC,EAAT,GAA4B,IAAZpC,EAAW,EAAXA,QACd,EAA0BqC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OACE,6BACE,kBAACR,EAAD,MACA,yBAAKC,UAAU,QACb,2BACEQ,YAAY,oBACZC,aAAcH,EACdI,OAAQ,SAACC,GAAD,OAAOJ,EAASI,EAAEC,OAAOC,UAEnC,4BAAQC,QAbQ,WACpB9C,EAAQ+C,KAAR,eAAqBT,MAYjB,aAGF,yBAAKN,UAAU,QACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,OACb,kBAACE,EAAD,OAEF,yBAAKF,UAAU,OACb,kBAACC,EAAD,OAGF,6BACE,2CAsBGe,MAbf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,iBAAiBC,UAAWjB,QCnGpCkB,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDyHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.83653f05.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nfunction MicroFrontend({ name, host, history }) {\r\n  useEffect(() => {\r\n    const scriptId = `micro-frontend-script-${name}`;\r\n    console.log(\"********** scriptId ************* \"+scriptId);\r\n    \r\n    const renderMicroFrontend = () => {\r\n      \r\n      window[`render${name}`](`${name}-container`, history);\r\n    };\r\n\r\n    if (document.getElementById(scriptId)) {\r\n      renderMicroFrontend();\r\n      return;\r\n    }\r\n    \r\n    fetch(`${host}/asset-manifest.json`)\r\n      .then((res) => res.json())\r\n      .then((manifest) => {\r\n        const script = document.createElement(\"script\");\r\n        script.id = scriptId;\r\n        script.crossOrigin = \"\";\r\n        script.src = `${host}${manifest.files[\"main.js\"]}`;\r\n        script.onload = () => {\r\n          renderMicroFrontend();\r\n        };\r\n        document.head.appendChild(script);\r\n      });\r\n\r\n    return () => {\r\n      window[`unmount${name}`] && window[`unmount${name}`](`${name}-container`);\r\n    };\r\n  });\r\n\r\n  return <main id={`${name}-container`} />;\r\n}\r\n\r\nMicroFrontend.defaultProps = {\r\n  document,\r\n  window,\r\n};\r\n\r\nexport default MicroFrontend;\r\n","import React, { useState } from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport MicroFrontend from \"./MicroFrontend\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst defaultHistory = createBrowserHistory();\r\n\r\n/* Configuration of all the microfronends */\r\nconst {\r\n  REACT_APP_DOGS_HOST: dogsHost,\r\n  REACT_APP_CATS_HOST: catsHost,\r\n  REACT_APP_CONTENTS_HOST: contentsHost,\r\n} = process.env;\r\n\r\n/*Define the header of the container*/\r\nfunction Header() {\r\n  return (\r\n    <div className=\"banner\">\r\n      <h1 className=\"banner-title\">&#128571; Cats and Dogs &#128021;</h1>\r\n      <h4>Random pics of cats and dogs</h4>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*Call the dogs MicroFrontend through MicroFrontend  JS*/\r\nfunction Dogs({ history }) {\r\n  return <MicroFrontend history={history} host={dogsHost} name=\"Dogs\" />;\r\n}\r\n\r\n/*Call the dogs MicroFrontend through MicroFrontend  JS*/\r\nfunction content({ history }) {\r\n  console.log(\"333333333333333333333333333\");\r\n  return <MicroFrontend history={history} host={contentsHost} name=\"contentsHost\" />;\r\n}\r\n\r\n\r\n/*Call the dogs MicroFrontend through MicroFrontend  JS*/\r\nfunction Cats({ history }) {\r\n  return <MicroFrontend history={history} host={catsHost} name=\"Cats\" />;\r\n}\r\n\r\n/*This function is used to great a cat inside a cats microfrontend*/\r\nfunction GreetingCat({ history }) {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"home\">\r\n        <MicroFrontend history={history} host={catsHost} name=\"Cats\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*This function is used to great a cat inside a cats microfrontend*/\r\nfunction GreetingDog({ history }) {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"home\">\r\n        <MicroFrontend history={history} host={dogsHost} name=\"Dogs\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Home({ history }) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleOnClick = () => {\r\n    history.push(`/cat/${input}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"home\">\r\n        <input\r\n          placeholder=\"Insert a greeting\"\r\n          defaultValue={input}\r\n          onBlur={(e) => setInput(e.target.value)}\r\n        />\r\n        <button onClick={handleOnClick}>Greet Me</button>\r\n      </div>\r\n\r\n      <div className=\"home\">\r\n        <div className=\"content\">\r\n          <div className=\"cat\">\r\n            <Cats />\r\n          </div>\r\n          <div className=\"dog\">\r\n            <Dogs />\r\n          </div>\r\n\r\n          <div>\r\n            <contentsHost />\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <React.Fragment>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/cat/:greeting\" component={GreetingCat} />\r\n        </Switch>\r\n      </React.Fragment>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}